name: Sync Upstream Repository

on:
  schedule:
    - cron: '0 */6 * * *'  # 每6小时运行一次
  workflow_dispatch:  # 允许手动触发

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  sync-upstream:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git config --global --add safe.directory /github/workspace

      - name: Checkout repository
        run: |
          git clone https://github.com/EightDoor/siyuan.git .
          git checkout dev

      - name: Get current version
        id: current_version
        run: |
          git describe --tags --abbrev=0 | sed 's/^v//' > current_version.txt
          echo "current_version=$(cat current_version.txt)" >> $GITHUB_OUTPUT

      - name: Fetch upstream repository
        run: |
          git remote add upstream https://github.com/siyuan-note/siyuan.git
          git fetch upstream master --no-tags

      - name: Get latest upstream version
        id: upstream_version
        run: |
          git describe --tags --abbrev=0 upstream/master | sed 's/^v//' > upstream_version.txt
          echo "upstream_version=$(cat upstream_version.txt)" >> $GITHUB_OUTPUT

      - name: Check if version is release version
        id: is_release_version
        run: |
          if [[ "${{ steps.upstream_version.outputs.upstream_version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Compare versions
        id: version_check
        run: |
          if [ "$(printf '%s\n' "${{ steps.current_version.outputs.current_version }}" "${{ steps.upstream_version.outputs.upstream_version }}" | sort -V | head -n1)" = "${{ steps.current_version.outputs.current_version }}" ]; then
            echo "need_update=true" >> $GITHUB_OUTPUT
          else
            echo "need_update=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for conflicts
        if: steps.version_check.outputs.need_update == 'true'
        run: |
          git merge --no-commit --no-ff upstream/master || true
          git merge --abort
          git diff --name-only --diff-filter=U > conflicts.txt
          if [ -s conflicts.txt ]; then
            echo "CONFLICT_FILES=$(cat conflicts.txt)" >> $GITHUB_ENV
            exit 1
          fi

      - name: Create notification file
        if: steps.version_check.outputs.need_update == 'true'
        run: |
          if [ -f conflicts.txt ]; then
            echo "冲突文件：$(cat conflicts.txt)" > notification.txt
          else
            echo "成功完成与上游仓库的同步！" > notification.txt
            echo "当前版本：v${{ steps.current_version.outputs.current_version }}" >> notification.txt
            echo "同步到版本：v${{ steps.upstream_version.outputs.upstream_version }}" >> notification.txt
            echo "已自动完成以下操作：" >> notification.txt
            echo "1. 将上游仓库的 master 分支合并到本地 dev 分支" >> notification.txt
            if [ "${{ steps.is_release_version.outputs.is_release }}" = "true" ]; then
              echo "2. 将本地 dev 分支合并到本地 master 分支" >> notification.txt
              echo "3. 创建并推送 release 标签" >> notification.txt
            else
              echo "2. 本次更新为开发版本，未合并到 master 分支" >> notification.txt
            fi
          fi

      - name: Merge upstream changes to dev
        if: steps.version_check.outputs.need_update == 'true' && success()
        run: |
          git merge --no-ff upstream/master
          git push origin dev

      - name: Merge to master and create release
        if: steps.version_check.outputs.need_update == 'true' && steps.is_release_version.outputs.is_release == 'true' && success()
        run: |
          git checkout master
          git merge --no-ff dev
          git push origin master
          git tag -a "v${{ steps.upstream_version.outputs.upstream_version }}" -m "Release v${{ steps.upstream_version.outputs.upstream_version }}"
          git push origin "v${{ steps.upstream_version.outputs.upstream_version }}" 